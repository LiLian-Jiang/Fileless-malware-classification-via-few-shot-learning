import  torch, os
import  numpy as np
from    Mydataset import Mydataset
import  scipy.stats
from    torch.utils.data import DataLoader
from    torch.optim import lr_scheduler
import  random, sys
import  argparse
from sklearn.metrics import confusion_matrix, classification_report

from meta import Meta
from utils import increment_path
from torch.utils.tensorboard.writer import SummaryWriter


def mean_confidence_interval(accs, confidence=0.95):
    n = accs.shape[0]
    m, se = np.mean(accs), scipy.stats.sem(accs)
    h = se * scipy.stats.t._ppf((1 + confidence) / 2, n - 1)
    return m, h


def main():

    torch.manual_seed(2222)
    torch.cuda.manual_seed_all(2222)
    np.random.seed(2222)

    print(args)


    config = [
        ('conv2d', [32, 3, 3, 3, 1, 0]),
        ('relu', [True]),
        ('bn', [32]),
        ('max_pool2d', [2, 2, 0]),

        ('conv2d', [32, 32, 3, 3, 1, 0]),
        ('relu', [True]),
        ('bn', [32]),
        ('max_pool2d', [2, 2, 0]),

        ('conv2d', [32, 32, 3, 3, 1, 0]),
        ('relu', [True]),
        ('bn', [32]),
        ('max_pool2d', [2, 2, 0]),

        ('conv2d', [32, 32, 3, 3, 1, 0]),
        ('relu', [True]),
        ('bn', [32]),
        ('max_pool2d', [2, 1, 0]),


        ('flatten', []),
        ('linear', [args.n_way, 32 * 5 * 5])#5,5
    ]


    device = torch.device('cuda')
    maml = Meta(args, config).to(device)


    tmp = filter(lambda x: x.requires_grad, maml.parameters())
    num = sum(map(lambda x: np.prod(x.shape), tmp))
    print(maml)
    print('Total trainable tensors:', num)

    # batchsz here means total episode number
    mini = Mydataset('', mode='train', n_way=args.n_way, k_shot=args.k_spt,
                        k_query=args.k_qry,
                        batchsz=100, resize=args.imgsz)
    mini_test = Mydataset('', mode='test', n_way=args.n_way, k_shot=args.k_spt,
                             k_query=args.k_qry,
                             batchsz=10, resize=args.imgsz)

    train_losses = []
    train_acces = []
    best_acc = 0
    best_prec =0.0
    best_recall =0.0
    best_f1 = 0.0
    eval_acces = []
    save_acc = []
    save_f1 = []
    save_pre = []
    save_rec = []
    floder = './runs/3060_MMEL_5w5s15q_lr0.08'
    tensorboard_dir = 'tensorboard_log'
    floder = increment_path(floder)
    tensorboard_dir = floder / tensorboard_dir
    if not os.path.exists(tensorboard_dir):
        os.makedirs(tensorboard_dir)

    writer = SummaryWriter(log_dir=floder)
    for epoch in range(args.epoch//1000):
        # fetch meta_batchsz num of episode each time
        db = DataLoader(mini, args.task_num, shuffle=True, num_workers=0, pin_memory=True)

        for step, (x_spt, y_spt, x_qry, y_qry) in enumerate(db):

            x_spt, y_spt, x_qry, y_qry = x_spt.to(device), y_spt.to(device), x_qry.to(device), y_qry.to(device)

            accs,loss_q = maml(x_spt, y_spt, x_qry, y_qry)#train_loss=loss_q
            train_acces.append(accs[-1])
            # train_losses.append(loss_q[0].cpu().detach().numpy())
            train_losses.append(loss_q.item())

            if step % 30 == 0:
                print('step:', step, '\ttraining acc:', accs)

            if step % 500 == 0:  # evaluation
                db_test = DataLoader(mini_test, 1, shuffle=True, num_workers=0, pin_memory=True)
                accs_all_test = []
                #新指标
                prec_all_test = []
                recall_all_test = []
                f1_all_test = []

                for x_spt, y_spt, x_qry, y_qry in db_test:
                    x_spt, y_spt, x_qry, y_qry = x_spt.squeeze(0).to(device), y_spt.squeeze(0).to(device), \
                                                 x_qry.squeeze(0).to(device), y_qry.squeeze(0).to(device)

                    accs,precision,recall,f1,val_predict,true_label= maml.finetunning(x_spt, y_spt, x_qry, y_qry)
                    accs_all_test.append(accs)

                    prec_all_test.append(precision)
                    recall_all_test.append(recall)
                    f1_all_test.append(f1)


                # [b, update_step+1]
                accs = np.array(accs_all_test).mean(axis=0).astype(np.float16)

                precisions = np.array(prec_all_test).mean(axis=0).astype(np.float16)
                recalls = np.array(recall_all_test).mean(axis=0).astype(np.float16)
                f1s = np.array(f1_all_test).mean(axis=0).astype(np.float16)
                eval_acces.append(accs[-1])
                save_acc = accs
                save_f1 = f1s
                save_pre = precisions
                save_rec = recalls
                print('Test acc:',accs)
                # print('Test acc:',accuracy1)
                print('Test precisions:',precisions)
                print('Test recall:',recalls)
                print('Test f1:',f1s)

                if best_acc < accs[-1]:
                    best_acc = accs[-1]
                if best_prec < precisions[-1]:
                    best_prec = precisions[-1]
                if best_recall < recalls[-1]:
                    best_recall = recalls[-1]
                if best_f1 < f1s[-1]:
                    best_f1 = f1s[-1]
        writer.add_scalars('Loss', {'TrainLoss': loss_q.item()}, epoch)
        writer.add_scalars('Metrics',
                           {'Accuracy': save_acc[-1], 'F_score': save_f1[-1], 'Precision': save_pre[-1],
                            'Recall': save_rec[-1]}, epoch)

    writer.close()
    print(f'The highest precision is {best_prec}')
    print(f'The highest recall is {best_recall}')
    print(f'The highest f1 is {best_f1}')
    print(f'The highest accuracy is {best_acc}')
    print((classification_report(true_label, val_predict)))






if __name__ == '__main__':

    argparser = argparse.ArgumentParser()
    argparser.add_argument('--epoch', type=int, help='epoch number', default=60000)
    argparser.add_argument('--n_way', type=int, help='n way', default=5)
    argparser.add_argument('--k_spt', type=int, help='k shot for support set', default=5)
    argparser.add_argument('--k_qry', type=int, help='k shot for query set', default=15)
    argparser.add_argument('--imgsz', type=int, help='imgsz', default=84)
    argparser.add_argument('--imgc', type=int, help='imgc', default=3)
    argparser.add_argument('--task_num', type=int, help='meta batch size, namely task num', default=4)#4
    argparser.add_argument('--meta_lr', type=float, help='meta-level outer learning rate', default=1e-3)#1e-3
    argparser.add_argument('--update_lr', type=float, help='task-level inner update learning rate', default=0.08)#0.01
    argparser.add_argument('--update_step', type=int, help='task-level inner update steps', default=5)
    argparser.add_argument('--update_step_test', type=int, help='update steps for finetunning', default=10)


    args = argparser.parse_args()

    main()
