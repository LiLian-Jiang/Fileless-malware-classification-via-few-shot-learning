import  torch
from    torch import nn
from    torch import optim
from    torch.nn import functional as F
from    torch.utils.data import TensorDataset, DataLoader
from    torch import optim
import  numpy as np
from sklearn.preprocessing import power_transform,normalize

from    learner import Learner
from    copy import deepcopy
from utils import metrics,get_performance,AverageMeter

class LabelSmoothingCrossEntropy(nn.Module):
    """
    NLL loss with label smoothing.
    """
    def __init__(self, smoothing=0.1):
        """
        Constructor for the LabelSmoothing module.
        :param smoothing: label smoothing factor
        """
        super(LabelSmoothingCrossEntropy, self).__init__()
        assert smoothing < 1.0
        self.smoothing = smoothing
        self.confidence = 1. - smoothing

    def forward(self, x, target):
        logprobs = F.log_softmax(x, dim=-1)
        nll_loss = -logprobs.gather(dim=-1, index=target.unsqueeze(1))
        nll_loss = nll_loss.squeeze(1)
        smooth_loss = -logprobs.mean(dim=-1)
        loss = self.confidence * nll_loss + self.smoothing * smooth_loss
        return loss.mean()

class Meta(nn.Module):
    """
    Meta Learner
    """
    def __init__(self, args, config):
        """

        :param args:
        """
        super(Meta, self).__init__()

        self.update_lr = args.update_lr
        self.meta_lr = args.meta_lr
        self.n_way = args.n_way
        self.k_spt = args.k_spt
        self.k_qry = args.k_qry
        self.task_num = args.task_num
        self.update_step = args.update_step
        self.update_step_test = args.update_step_test

        # 添加一个loss_fun
        self.loss_func = LabelSmoothingCrossEntropy()


        self.net = Learner(config, args.imgc, args.imgsz)
        self.meta_optim = optim.Adam(self.net.parameters(), lr=self.meta_lr)




    def clip_grad_by_norm_(self, grad, max_norm):
        """
        in-place gradient clipping.
        :param grad: list of gradients
        :param max_norm: maximum norm allowable
        :return:
        """

        total_norm = 0
        counter = 0
        for g in grad:
            param_norm = g.data.norm(2)
            total_norm += param_norm.item() ** 2
            counter += 1
        total_norm = total_norm ** (1. / 2)

        clip_coef = max_norm / (total_norm + 1e-6)
        if clip_coef < 1:
            for g in grad:
                g.data.mul_(clip_coef)

        return total_norm/counter


    def forward(self, x_spt, y_spt, x_qry, y_qry):
        """

        :param x_spt:   [b, setsz, c_, h, w]
        :param y_spt:   [b, setsz]
        :param x_qry:   [b, querysz, c_, h, w]
        :param y_qry:   [b, querysz]
        :return:
        """
        task_num, setsz, c_, h, w = x_spt.size()
        querysz = x_qry.size(1)

        losses_q = [0 for _ in range(self.update_step + 1)]  # losses_q[i] is the loss on step i
        corrects = [0 for _ in range(self.update_step + 1)]


        for i in range(task_num):

            # 1. run the i-th task and compute loss for k=0
            logits = self.net(x_spt[i], vars=None, bn_training=True)
            loss = self.loss_func(logits, y_spt[i])

            a = self.net.parameters()
            a.requires_grad_()
            loss.requires_grad_()
            grad = torch.autograd.grad(loss, self.net.parameters(),allow_unused=True)

            fast_weights = list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, self.net.parameters())))#list(18,)

            # this is the loss and accuracy before first update
            with torch.no_grad():
                # [setsz, nway]
                logits_q = self.net(x_qry[i], self.net.parameters(), bn_training=True)
                loss_q = self.loss_func(logits_q, y_qry[i])

                losses_q[0] += loss_q
                #mean_substraction
                logits_q = logits_q - logits_q.mean(1,keepdim=True)
                #normalization
                x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
                logits_q = (logits_q - x_mean1) / x_std1

                pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
                correct = torch.eq(pred_q, y_qry[i]).sum().item()
                corrects[0] = corrects[0] + correct

            # this is the loss and accuracy after the first update
            with torch.no_grad():
                # [setsz, nway]
                logits_q = self.net(x_qry[i], fast_weights, bn_training=True)
                loss_q = self.loss_func(logits_q, y_qry[i])

                losses_q[1] += loss_q
                # [setsz]
                logits_q = logits_q - logits_q.mean(1, keepdim=True)
                x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
                logits_q = (logits_q - x_mean1) / x_std1

                pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
                correct = torch.eq(pred_q, y_qry[i]).sum().item()
                corrects[1] = corrects[1] + correct

            for k in range(1, self.update_step):
                # 1. run the i-th task and compute loss for k=1~K-1
                logits = self.net(x_spt[i], fast_weights, bn_training=True)
                loss = self.loss_func(logits, y_spt[i])


                # 2. compute grad on theta_pi
                grad = torch.autograd.grad(loss, fast_weights)
                # 3. theta_pi = theta_pi - train_lr * grad
                fast_weights = list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))

                logits_q = self.net(x_qry[i], fast_weights, bn_training=True)

                # loss_q will be overwritten and just keep the loss_q on last update step.
                loss_q = self.loss_func(logits_q, y_qry[i])
                losses_q[k + 1] += loss_q

                with torch.no_grad():
                    logits_q = logits_q - logits_q.mean(1, keepdim=True)
                    x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
                    logits_q = (logits_q - x_mean1) / x_std1
                    pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
                    correct = torch.eq(pred_q, y_qry[i]).sum().item()  # convert to numpy
                    corrects[k + 1] = corrects[k + 1] + correct



        # end of all tasks
        # sum over all losses on query set across all tasks
        loss_q = losses_q[-1] / task_num

        # optimize theta parameters
        self.meta_optim.zero_grad()
        loss_q.backward()
        # print('meta update')
        # for p in self.net.parameters()[:5]:
        # 	print(torch.norm(p).item())
        self.meta_optim.step()


        accs = np.array(corrects) / (querysz * task_num)

        return accs,loss_q


    def finetunning(self, x_spt, y_spt, x_qry, y_qry):
        """

        :param x_spt:   [setsz, c_, h, w]
        :param y_spt:   [setsz]
        :param x_qry:   [querysz, c_, h, w]
        :param y_qry:   [querysz]
        :return:
        """
        assert len(x_spt.shape)

        querysz = x_qry.size(0)#5*15

        corrects = [0 for _ in range(self.update_step_test + 1)]

        f1s = [0 for _ in range(self.update_step_test + 1)]
        accs = [0 for _ in range(self.update_step_test + 1)]
        recalls = [0 for _ in range(self.update_step_test + 1)]
        precs = [0 for _ in range(self.update_step_test + 1)]
        # accuracy1, f_score1, precision1, recall1 = [AverageMeter() for i in range(4)]

        val_predict = []
        true_label = []

        # in order to not ruin the state of running_mean/variance and bn_weight/bias
        # we finetunning on the copied model instead of self.net
        net = deepcopy(self.net)

        # 1. run the i-th task and compute loss for k=0
        logits = net(x_spt)

        loss = self.loss_func(logits, y_spt)

        grad = torch.autograd.grad(loss, net.parameters())
        fast_weights = list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, net.parameters())))

        # this is the loss and accuracy before first update
        with torch.no_grad():
            # [setsz, nway]
            logits_q = net(x_qry, net.parameters(), bn_training=True)

            # [setsz]
            logits_q = logits_q - logits_q.mean(1, keepdim=True)
            x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
            logits_q = (logits_q - x_mean1) / x_std1
            pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
            # scalar
            correct = torch.eq(pred_q, y_qry).sum().item()
            corrects[0] = corrects[0] + correct
            pred_q1 = pred_q.cpu().detach().numpy()


            y_qry1 = y_qry.cpu().detach().numpy()


            # 新添加的指标
            acc_sub, f1_sub, prec_sub, recall_sub = metrics(y_qry1, pred_q1)


            f1s[0] = f1s[0] + f1_sub
            accs[0] = accs[0] + acc_sub
            recalls[0] = recalls[0] + recall_sub
            precs[0] = precs[0] + prec_sub

            # 使用classification——report
            val_predict.extend(pred_q.cpu().detach().numpy())
            true_label.extend(y_qry.cpu().detach().numpy())

        # this is the loss and accuracy after the first update
        with torch.no_grad():
            # [setsz, nway]
            logits_q = net(x_qry, fast_weights, bn_training=True)

            # [setsz]
            logits_q = logits_q - logits_q.mean(1, keepdim=True)
            x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
            logits_q = (logits_q - x_mean1) / x_std1
            pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
            # scalar
            correct = torch.eq(pred_q, y_qry).sum().item()
            corrects[1] = corrects[1] + correct
            pred_q1 = pred_q.cpu().detach().numpy()


            y_qry1 = y_qry.cpu().detach().numpy()


            # 新添加的指标
            acc_sub, f1_sub, prec_sub, recall_sub = metrics(y_qry1,
                                                            pred_q1)

            f1s[1] = f1s[1] + f1_sub
            accs[1] = accs[1] + acc_sub
            recalls[1] = recalls[1] + recall_sub
            precs[1] = precs[1] + prec_sub

            # 使用classification——report
            val_predict.extend(pred_q.cpu().detach().numpy())
            true_label.extend(y_qry.cpu().detach().numpy())

        for k in range(1, self.update_step_test):
            # 1. run the i-th task and compute loss for k=1~K-1
            logits = net(x_spt, fast_weights, bn_training=True)

            loss = self.loss_func(logits, y_spt)

            # 2. compute grad on theta_pi
            grad = torch.autograd.grad(loss, fast_weights)
            # 3. theta_pi = theta_pi - train_lr * grad
            fast_weights = list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))

            logits_q = net(x_qry, fast_weights, bn_training=True)

            # loss_q will be overwritten and just keep the loss_q on last update step.
            loss_q = self.loss_func(logits_q, y_qry)

            with torch.no_grad():
                logits_q = logits_q - logits_q.mean(1, keepdim=True)
                x_mean1, x_std1 = torch.mean(logits_q, dim=0), torch.std(logits_q, dim=0)
                logits_q = (logits_q - x_mean1) / x_std1
                pred_q = F.softmax(logits_q, dim=1).argmax(dim=1)
                correct = torch.eq(pred_q, y_qry).sum().item()  # convert to numpy
                corrects[k + 1] = corrects[k + 1] + correct

                pred_q1 = pred_q.cpu().detach().numpy()

                y_qry1 = y_qry.cpu().detach().numpy()


                # 新添加的指标
                acc_sub, f1_sub, prec_sub, recall_sub = metrics(y_qry1,
                                                                pred_q1)
                f1s[k + 1] = f1s[k + 1] + f1_sub
                accs[k + 1] = accs[k + 1] + acc_sub
                recalls[k + 1] = recalls[k + 1] + recall_sub
                precs[k + 1] = precs[k + 1] + prec_sub

                # 使用classification——report
                val_predict.extend(pred_q.cpu().detach().numpy())
                true_label.extend(y_qry.cpu().detach().numpy())


        del net

        precision = np.array(precs)
        recall = np.array(recalls)
        f1 = np.array(f1s)

        accs = np.array(corrects) / querysz

        return accs,precision, recall, f1,val_predict,true_label





def main():
    pass


if __name__ == '__main__':
    main()
